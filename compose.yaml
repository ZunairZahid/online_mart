version: '3.9'
name: mart
services:
  1-userservice-api:
    build:
      context: ./userservice
      dockerfile: Dockerfile.dev
    volumes:
      - ./userservice:/code  # Sync local development directory with the container
    depends_on:
        - pg_users_db
        - broker
    ports:
      - "8000:8000"  # Expose container port 8000 to host port 8000  
  2-products-api:
    build:
      context: ./productservice
      dockerfile: Dockerfile.dev
    volumes:
      - ./productservice:/code  # Sync local development directory with the container
    depends_on:
        - pg_products_db
        - broker
    ports:
      - "8002:8000"  # Expose container port 8000 to host port 8000  
  3-order-api:
    build:
      context: ./orderservice
      dockerfile: Dockerfile.dev
    volumes:
      - ./orderservice:/code  # Sync local development directory with the container
    depends_on:
        - pg_orders_db
        - broker
    ports:
      - "8003:8000"  # Expose container port 8000 to host port 8000
  4-inventory-api:
    build:
      context: ./inventoryservice
      dockerfile: Dockerfile.dev
    volumes:
      - ./inventoryservice:/code  # Sync local development directory with the container
    depends_on:
        - pg_inventory_db
        - broker
    ports:
      - "8004:8000"  # Expose container port 8000 to host port 8000  
  pg_users_db:
    image: postgres:latest
    restart: always
    container_name: user_db
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=user_db
    ports:
      - '5432:5432'
    volumes:
      - pg_users_db:/var/lib/postgresql/data
  
  pg_products_db:
    image: postgres:latest
    restart: always
    container_name: products_db
    environment:
      - POSTGRES_USER=product
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=products_db
    ports:
      - '5433:5432'
    volumes:
      - pg_products_db:/var/lib/postgresql/data
  pg_orders_db:
    image: postgres:latest
    restart: always
    container_name: orders_db
    environment:
      - POSTGRES_USER=orders
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=orders_db
    ports:
      - '5434:5432'
    volumes:
      - pg_orders_db:/var/lib/postgresql/data
  pg_inventory_db:
    image: postgres:latest
    restart: always
    container_name: inventory_db
    environment:
      - POSTGRES_USER=inventory
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=inventory_db
    ports:
      - '5435:5432'
    volumes:
      - pg_inventory_db:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_MAX_MESSAGE_BYTES: 200000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 200000000

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
volumes:
  pg_users_db:
    driver: local
  pg_products_db:
    driver: local
  pg_orders_db:
    driver: local
  pg_inventory_db:
    driver: local
networks:
  default:
    driver: bridge
